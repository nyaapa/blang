---
name: template
in: auto i = 42;
out:
    - [ identifier, auto ]
    - [ identifier, i ]
    - [ assign ]
    - [ integer_value, 42 ]
    - [ delim ]
---
name: string escapes
in: '"Morning!*tNice day for fishing!"'
out:
    - [ string_value, "Morning!\tNice day for fishing!" ]
---
name: char escapes {
in: "'Huh*('"
out:
    - [ char_value, "Huh{" ]
---
name: char escapes *
in: "'*)**!**'"
out:
    - [ char_value, "}*!*" ]
---
name: char length enforcement 
in: auto l = '12345';
out:
    - [ identifier, auto ]
    - [ identifier, l ]
    - [ assign ]
    - [ error, "Character literal is too long: 12345" ]
    - [ delim ]
---
name: endless string 
in: 'auto l = "aaaaa;'
out:
    - [ identifier, auto ]
    - [ identifier, l ]
    - [ assign ]
    - [ error, "Endless string literal: aaa..." ]
---
name: rel ops
in: < > <= == >= !=
out:
    - [ lt ]
    - [ gt ]
    - [ le ]
    - [ eq ]
    - [ ge ]
    - [ ne ]
---
name: unary ops
in: '++ -- * & - ! ~'
out:
    - [ inc ]
    - [ dec ]
    - [ star ]
    - [ ampersand ]
    - [ minus ]
    - [ not ]
    - [ neg ]
---
name: assign ops -- going to merge during parsing
in: "= =+ =-"
out:
    - [ assign ]
    - [ assign ]
    - [ plus ]
    - [ assign ]
    - [ minus ]

